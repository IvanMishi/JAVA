package org.example;
import java.util.Scanner;

public class TypeCycle {
    public static void main(String[] args) {
        
/*
            //Переменные. Примитивные типы данных.
        int name; //Переменная ячейка которая хранит каки-либо значения чтоб ее использовать нужно сначала ее задекларировать, затем инициализировать
        //int множество всех целых чисел 32 бит
        //Декларация(выделить память) = тип переменной int = name (имя переменной с маленькой буквы) ;
        name = 12345; //Инициализация - имя переменной = значения (соответствующие ее типу дынных, числа int)
        System.out.println(name);//Вывести на экран переменную через параметр
        int secondName = 54321;
        System.out.println(secondName);
        */


        /*
            //Строки(String) в Java. Ссылочные типы данных.
        String s = "value"; // переменная ссылается на объект класса String "value" - это объект созданий с помощью класса String
        //Тип данных строка = имя= "значение";
        //String - это класс , а не примитив
        //Класс не имеет ничего общего с материальным объектом, Класс - схема создания объекта
        //Объект - на основе этой схемы
        //String a = "a";//a класса String ссылается на объект => "a"
        //String b = "b";//b класса String ссылается на объект => "b"
        int i = 25;// i примитив типа int  хранит в себе = "25"
        //System.out.print(a + "+" + b + "=" + i + s + ":");// объеденение переменных и вывод в виде строк
         */


        /*
            //Цикл while
        //Значение типа boolean возвращают операции сравнения, логические операции и их сочетания.
        boolean bool1 = 5 > 2;//
        boolean bool2 = 5 > 7;
        boolean bool3 = 5 >= 4;//не строгое сравнивание(больше или равно)
        boolean bool4 = 5 == 5;//равеенство
        boolean bool5 = 5 != 3;//неравенство
        //Сравнение значений переменных
        int a = 4;
        int b = 3;
        boolean c = a > b;//true Оператор > сравнил операнд слева с операндом справа, в результатe сравнения мы присвоили булевоe значение переменной c.
            //вывести значения в терминал, каждое с новой строки
        System.out.println("\n"
                + bool1 + "(5>2)" + "\n"
                + bool2 + "(5>7)" + "\n"
                + bool3 + "(5>=4)" + "\n"
                + bool4 + "(5==5)" + "\n"
                + bool5 + "(5!=3)" + "\n"
                + c + "(4>3)" + "\n");

        //В цикле while необходим какой-то логический оператор , условие до каких пор будет выполнятся этот цикл
        int ValueWhile = 0;   //Примитив имеет числовое значение = "0"
        boolean VBL = ValueWhile > 5;  // Значение 0>5 = true
        while(ValueWhile < 5){   //Бесконечный цикл, т.к значение в условиях всегда (10>5) true в терминал будет выводится While пока работает программа
        //while(ValueWhile < 5) { // Аргуметы - выполнить пока 0<5
            ValueWhile = ValueWhile + 1; //Каждый раз когда цикл проходит к переменной ValueCycleWhile добавит значение 1 и остановит выполнение при условии 5=5
            System.out.println("Cycle While = " + " "  + " it is true let's continue" + "\n");
        }
        */

        /*
        //Цикл while с вводом данных от пользователя до тех пор пока не будет выполнено условие
        System.out.println("Программа выполняется пока не введете число 5");
        Scanner scanner= new Scanner(System.in);
        int value5 = scanner.nextInt();//Получить числовое значение в сканнер
        System.out.println("Это число не является значением 5, попробуте еще раз");
        while(value5 != 5)//Сначала выполняет условия boolean(пока значение не равно 5), затем проверяет инструкцию
        {
        value5 = scanner.nextInt();//Ввод даных от пользователя
            System.out.println("Введите 5, тогда программа завершится");
        }
        System.out.println("Вы ввыели 5, прогрвмма выполнена");
        */

        /*
        //Цикл do while.
        Scanner sca = new Scanner (System.in);
        int val6;
        do //Сначала выполняет инструкции не зависимо boolean (true/false)
        {
            System.out.println("Инструкция - программа работает пока вы не введете число 6");
            val6 = sca.nextInt();//Получить данные от пользователя

        }
        while (val6 != 6); //Затем выполняет условия, гарантировано, что однократно будет выполнен цикл
        System.out.println("Вы ввыели 6, условие прогрвммы выполнено!");
        */

       /* int sum = 0;// sum - переменная которая суммирует все получаемые числа в переменной 0 и прибавляет к этому значению значение value
        int value = -1;//value переменная = -1 (чтоб цикл запустился она должна быть !=0 )и цикл будет до тех пор пока сканер не получит 0

        while (value != 0) {// Программа считает сумму всех переданы ей чисел до тех пор пока пока пользователь не передаст ей число- 0, то есть цикл работает пока не равен 0
            value = new Scanner (System.in).nextInt();//Сканировать числовое значение введенное пользователем и сохранить в переменную value
            System.out.println("Введите число для суммирования со следующим числом, или введите 0 для получения результата");
            sum = sum + value;
        }
        System.out.println("Сумма равна " + sum);
        */


        /*
        //Цикл for.
        //Условный оператор for - (блок условий) {тело цикла выполняется если условие верно} выполнится 1 раз, ни разу бесконечно
        for (i = 0; i <= 10; i++){
            // i счетчик - та переменная которая будет каким-то образом изменятся в каждой итерации этого цикла, для нее задаем стартовую позицию
            // Условия - до тех пор пока i <= 10 цикл будет выполнятся (цикл проверки)
            // Инкрементировать (увеличивать) значение переменной = действие на каждую итерацию цикла операцией  пост-инкремента( i++(0+1))
            System.out.println("Number: " + i);
        }*/

        /*Оператор for (параметры  стартовое значение i = 0; условие продолжения цикла i < 5; выражение на итерацию цикла(инкримент) i = i + 1)
        int i;
        System.out.println("Отсчет начинается с 0");
        for (i = 0; i < 5; i = i + 1) {//Цикл будет выполнен 5 раз до тех пор пока i=5
            System.out.println(i);
        }//(0 1 2 3 4) 5 уже не выводится тк цикл на этом значении заканчивается
        System.out.println("После цикла :");
        System.out.println(i);
        */

        /*
        //Обратный отсчет в цикле от 50 до 1 (значение больше чем 0)
        //если i - 2 то только четные числа
        for (int i = 50; i > 0; i = i - 0)
        {
            System.out.println(i);
        }
        */

        /*
        //Бесконечный цикл for
        for (;;) {
            System.out.println("Введите число");
            int value1 = new Scanner (System.in).nextInt();//Получить число от пользователя и записать значения в переменную
            System.out.println("Введите второе число для умножения на первое");
            int value2 = new Scanner (System.in).nextInt();//Получить число от пользователя и записать значения в переменную
            int result = value1 * value2;//Выражение записаное в переменную result
            System.out.println("Произведение чисел равно: " + result);//Вывести в терминал результат и начать цикл заново без завершения программы
        }
        */


        /*
        //Можно не указывать параметр при условии что остальные параметры логичны
        //Если не указать второй параметр то цикл станет бесконечным
        //Выражение может быть использовано в инструкции
        int i = 0;
        for (; i < 100; ){
            i = i + 10;
            System.out.println(i);
        }
        */

        /*
        //Условный оператор if если условие в круглых скобках верно, то выполним инструкцию в теле
        int ifInt = 0;
        if (ifInt > 5){//Условие которое оператор должен проверить - переменная/выражение
            System.out.println("It is less than 5");
        }//Можно создать новое условие и проверить его
        else if (ifInt < 0) {//Иначе если - в случае если первое условие не выполнилось и нужно проверить какое-то второе условие
            System.out.println("It is more than 5");
        }////Можно создать еще условие и проверить его
        else if (ifInt == 0) {
            System.out.println("It is equals 0");
        }
        //Если же условие отработало не верно ifInt == 5 (false) то можно проверить еще одно условие или вывести резудьтат
        else {//Проверяет условия первого оператора, а не создает новые условия
            System.out.println("Check your numbers! Something is not true");
        }*/


    }
}